

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                                           Thu Oct 19 16:24:18 2023


     1                           	processor	18F4520
     2                           	pagewidth 132
     3                           	opt	flic
     4                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    11                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    12                           	psect	code,global,reloc=2,class=CODE,delta=1
    13                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    14                           	psect	edata,global,class=EEDATA,space=3,delta=1,noexec
    15                           	psect	mytext,local,reloc=2,class=CODE,delta=1
    16   000000                     
    17                           	psect	edata
    18   000000                     stk_offset	set	0
    19   000000                     auto_size	set	0
    20                           
    21                           ; stack_auto defines a symbol /name/_offset which equates to the
    22                           ; stack offset of the auto object in question
    23   000000                     
    24                           ; stack_param defines a symbol /name/_offset which equates to the
    25                           ; stack offset of the parameter object in question
    26   000000                     
    27                           ; alloc_stack adjusts the SP to allocate space for auto objects
    28                           ; it also links in to the btemp symbol so that can be used
    29   000000                     
    30                           ; restore_stack adjusts the SP to remove all auto and parameter
    31                           ; objects from the stack prior to returning from a function
    32   000000                     
    33                           	psect	mytext
    34   000602                     _multi_signed:
    35                           	callstack 0
    36                           
    37                           ;set values
    38   000602  6E20               	movwf	32,c	;move the multiplicand to 0x20(low),(high) at 0x21
    39                           
    40                           ;multiplier at 0x01
    41                           ;check the sign of multiplicand and multiplier
    42   000604  AE20               	btfss	32,7,c
    43   000606  D002               	goto	cont
    44   000608  6C20               	negf	32,c
    45   00060A  2A30               	incf	48,f,c	;use to decide the signed bit of the result
    46   00060C                     cont:
    47   00060C  A601               	btfss	1,3,c	;4 bit multiplier
    48   00060E  D002               	goto	cont1
    49   000610  6C01               	negf	1,c
    50   000612  2A30               	incf	48,f,c
    51   000614                     cont1:
    52                           
    53                           ;set result = 0 ;result low 0x10, high 0x11
    54   000614  0E00               	movlw	0
    55   000616  6E10               	movwf	16,c
    56   000618  6E11               	movwf	17,c
    57   00061A                     loop:
    58   00061A  A001               	btfss	1,0,c	;if multiplier lsb is 1, then undergo addition
    59   00061C  D009               	goto	cont2
    60                           
    61                           ;addition overflow
    62   00061E  5011               	movf	17,w,c
    63   000620  2421               	addwf	33,w,c	;high bit add
    64   000622  6E11               	movwf	17,c
    65   000624  5020               	movf	32,w,c	;lowbit add
    66   000626  2410               	addwf	16,w,c	;low bit ans check overflow, save the result in wreg
    67   000628  E201               	bc	overflow	;check overflow
    68   00062A  D001               	goto	cont3
    69   00062C                     overflow:
    70   00062C  2A11               	incf	17,f,c	;high + 1
    71   00062E                     cont3:
    72   00062E  6E10               	movwf	16,c	;save low
    73   000630                     cont2:
    74   000630  4201               	rrncf	1,f,c	;multiplier rr
    75   000632  9E01               	bcf	1,7,c	;clear the msb
    76   000634  AE20               	btfss	32,7,c	;test msb, if it is 1 then record, skip if 0
    77   000636  D003               	goto	lr
    78   000638  4621               	rlncf	33,f,c
    79   00063A  8021               	bsf	33,0,c
    80   00063C  D001               	goto	cont4
    81   00063E                     lr:
    82   00063E  4621               	rlncf	33,f,c
    83   000640                     cont4:
    84   000640  4620               	rlncf	32,f,c	;multiplicand lr
    85   000642  9020               	bcf	32,0,c
    86   000644  0E00               	movlw	0
    87   000646  6201               	cpfseq	1,c	;compare 0 with multiplier, if 0, end
    88   000648  D7E8               	goto	loop
    89   00064A  0E01               	movlw	1	;if the count of 0x30 is 1, then the ans is negative
    90   00064C  6230               	cpfseq	48,c
    91   00064E  D006               	goto	cont_end
    92   000650  6C11               	negf	17,c
    93   000652  0611               	decf	17,f,c
    94   000654  6C10               	negf	16,c	;if the ans is -ve
    95   000656  E201               	bc	overflow1	;check overflow
    96   000658  D001               	goto	cont_end
    97   00065A                     overflow1:
    98   00065A  2A11               	incf	17,f,c
    99   00065C                     cont_end:
   100   00065C  C010 F001          	movff	16,1	;low bit result save in 0x01
   101   000660  C011 F002          	movff	17,2	;high bit result save in 0x02
   102   000664  0012               	return	
   103                           tosu	equ	0xFFF
   104                           tosh	equ	0xFFE
   105                           tosl	equ	0xFFD
   106                           stkptr	equ	0xFFC
   107                           pclatu	equ	0xFFB
   108                           pclath	equ	0xFFA
   109                           pcl	equ	0xFF9
   110                           tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           indf0	equ	0xFEF
   117                           postinc0	equ	0xFEE
   118                           postdec0	equ	0xFED
   119                           preinc0	equ	0xFEC
   120                           plusw0	equ	0xFEB
   121                           fsr0h	equ	0xFEA
   122                           fsr0l	equ	0xFE9
   123                           wreg	equ	0xFE8
   124                           indf1	equ	0xFE7
   125                           postinc1	equ	0xFE6
   126                           postdec1	equ	0xFE5
   127                           preinc1	equ	0xFE4
   128                           plusw1	equ	0xFE3
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           bsr	equ	0xFE0
   132                           indf2	equ	0xFDF
   133                           postinc2	equ	0xFDE
   134                           postdec2	equ	0xFDD
   135                           preinc2	equ	0xFDC
   136                           plusw2	equ	0xFDB
   137                           fsr2h	equ	0xFDA
   138                           fsr2l	equ	0xFD9
   139                           status	equ	0xFD8


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                               Thu Oct 19 16:24:18 2023

                          lr 063E                          cont 060C                          loop 061A  
                       cont1 0614                         cont2 0630                         cont3 062E  
                       cont4 0640                       isa$std 0001                      cont_end 065C  
                    overflow 062C                     isa$xinst 0000                     overflow1 065A  
               _multi_signed 0602  
